#!/usr/bin/python
"""
    Name:
        Instantly

    Description:
        Simple tool to expand 'instant' templates
"""

import base64
import json
import os
import shutil
import sys
import tarfile
from distutils.dir_util import copy_tree
from getpass import getpass
from glob import glob
from subprocess import Popen

import InstantlyFiles
from configobj import ConfigObj
from Rest import GOOGLE, RestClient

TEMPLATE_PATH = os.environ.get("INSTANT_TEMPLATES_PATH", os.path.expanduser('~') + "/.instant_templates/")
TEMPLATE_DESCRIPTION = """
 %(name)s
     Author: %(author)s
     License: %(license)s
     Last Updated: %(lastUpdated)s
     Description:
         %(description)s
"""

class AbstractRepository(object):
    """
        Defines the abstract concept of a repository for instantly to interact with
    """
    def addFile(self, name):
        pass

    def addDirectory(self, name):
        pass

    def remove(self, name):
        pass

    def revert(self, name):
        pass


class SVN(AbstractRepository):
    """
        Defines instantly interaction with a SVN repository
    """
    def addFile(self, name):
        Popen('svn add ' + name, shell=True).wait()

    def addDirectory(self, name):
        Popen('svn add ' + name, shell=True).wait()
        Popen("svn propset svn:ignore  '*.pyc *._bak *.bak' " + name, shell=True).wait()

    def remove(self, name):
        Popen('svn rm ' + name + " --force", shell=True).wait()

    def revert(self, name):
        Popen('svn revert ' + name, shell=True).wait()


class GIT(AbstractRepository):
    """
        Defines instantly interaction with a GIT repository
    """
    def addFile(self, name):
        Popen('git add ' + name, shell=True).wait()

    def add(self, name):
        Popen('git add ' + name, shell=True).wait()

    def remove(self, name):
        Popen('git rm ' + name + " --force", shell=True).wait()

    def revert(self, name):
        Popen('git checkout ' + name, shell=True).wait()

repository = {'':AbstractRepository, 'SVN':SVN, 'GIT':GIT}[os.environ.get("INSTANT_REPOSITORY_MODE", '')]()

if not os.path.exists(TEMPLATE_PATH):
    copy_tree(InstantlyFiles.__path__[0] + "/instant_templates/", TEMPLATE_PATH)

templates = []
for templateName in glob(TEMPLATE_PATH + "*"):
    if os.path.isdir(templateName):
        templates.append(os.path.basename(templateName))
templates.sort()

def createClient(authenticated=True):
    URL = "http://www.instantly.pl/api/"
    if authenticated:
        print "Please enter the login credentials for a google account that has been registered with instantly.pl"
        username = raw_input("Username (email): ")
        password = getpass()
        return RestClient(URL, username, password, authType=GOOGLE)
    else:
        return RestClient(URL)

if not len(sys.argv) > 1:
    print "Instantly allows you to expand simple templates, that take in a set number of arguments"
    print "Usage: instantly [template name] or instantly undo [template name]"
    print "       type instantly help for full instructions."
    print ""
    print "Installed Templates:"
    print "\t", templates
    sys.exit(1)

undo = False
command = sys.argv[1]
extraInputs = sys.argv[2:]
if command == "undo":
    undo = True
    templateName = sys.argv[2]
    extraInputs = sys.argv[3:]
elif command == "help":
    print "Instantly Commands"
    print ""
    print "instantly [template name]"
    print "\t Expand the named template locally"
    print "instantly help"
    print "\t Get full list of commands / help text"
    print "instantly find [template name]"
    print "\t Find pre-made templates to automate a task online"
    print "instantly grab [template name]"
    print "\t Add a template shared online to your local template repository"
    print "instantly drop [template name]"
    print "\t Permanently removes an installed template locally"
    print "instantly create_instant_template"
    print "\t Create a new instant template to automate a task"
    print "instantly share [template name]"
    print "\t Share a template you have created with others online"
    print "\t Must register your google account with http://instantly.pl/ to do this"
    sys.exit(0)
elif command == "drop":
    templateName = sys.argv[2]
    if raw_input("Are you sure you want to delete %s (y/n)? " % templateName).lower() == "y":
        shutil.rmtree(TEMPLATE_PATH + templateName)
        print "Successfully removed %s from local templates" % templateName
    sys.exit(0)
elif command == "share":
    templateName = sys.argv[2]
    template = ConfigObj(TEMPLATE_PATH + templateName + "/definition", interpolation=False)
    client = createClient()
    tarPath = TEMPLATE_PATH + templateName + ".tar.gz"
    with tarfile.open(tarPath, "w") as tar:
        tar.add(TEMPLATE_PATH + templateName, arcname=templateName)
    with open(tarPath, 'rb') as tar:
        encodedTemplate = tar.read().encode("zlib").encode("base64")

    client.post("InstantTemplate", {"license":template["Info"].get("license", ""),
                                    "name":templateName, "description":template["Info"].get("description", ""),
                                    "template":encodedTemplate})
    os.remove(tarPath)
    print "Successfully shared %s, thanks for helping to expand the number of instant templates!" % templateName
    sys.exit(0)
elif command == "find":
    searchTerm = sys.argv[2]
    results = createClient(authenticated=False).get("find/%s" % searchTerm)
    if not results:
        print "Sorry: no templates have been shared that match the search term '%s'," % searchTerm
        print "       but you could always add one ;)"
        sys.exit(0)

    print "Instantly found the following templates:"
    for result in results:
        print TEMPLATE_DESCRIPTION % result

    print " To install one of these templates run: instantly grab [template_name]"
    sys.exit(0)
elif command == "grab":
    templateName = sys.argv[2]
    template = createClient(authenticated=False).get("InstantTemplate/%s" % templateName)
    if not template:
        print "Sorry: no one has thought of a way to instantly '%s'," % searchTerm
        print "       but you could always create one ;)"
        sys.exit(0)
    tarPath = TEMPLATE_PATH + templateName + ".tar.gz"
    with open(tarPath, "wb") as tar:
        tar.write(template['template'].decode("base64").decode("zlib"))
    tarfile.open(tarPath).extractall(TEMPLATE_PATH)
    os.remove(tarPath)

    print "%(name)s has been installed as a local template. Run 'instantly %(name)s' to expand it." % \
          {"name":templateName}
    sys.exit(0)
else:
    templateName = command

if not templateName in templates:
    print "Sorry: there is no way to instantly '%s', but you could always add one ;)" % templateName
    print ""
    print "To see if anyone else has run: instantly find %s" % templateName
    sys.exit(1)

template = ConfigObj(TEMPLATE_PATH + templateName + "/definition", interpolation=False)

substitutions = {'InstantTemplates':TEMPLATE_PATH}
substitutions.update(os.environ)
for argument, argumentDefinition in template.get('Arguments', {}).iteritems():
    if extraInputs:
        substitutions[argument] = extraInputs.pop(0)
    else:
        substitutions[argument] = raw_input(argumentDefinition['label'] + " ")

directoryAdditions = template.get('DirectoryAdditions', {})
for name, directory in directoryAdditions.iteritems():
    directory = directory % substitutions
    substitutions[name] = directory
    if undo:
        shutil.rmtree(directory)
        repository.remove(directory)
    else:
        try:
            os.makedirs(directory)
        except:
            pass

        repository.addDirectory(directory)

fileDeletions = template.get('FileDeletions', {})
for name, fileName in fileDeletions.iteritems():
    fileName = fileName % substitutions
    substitutions[name] = fileName
    if undo:
        repository.revert(fileName)
    else:
        os.remove(fileName)
        repository.remove(fileName)

fileAdditions = template.get('FileAdditions', {})
if undo:
    for source, fileAddition in fileAdditions.iteritems():
        fileName = fileAddition % substitutions
        if os.path.exists(fileName):
            os.remove(fileName)
        repository.remove(fileName)
    sys.exit(0)

for source, destination in fileAdditions.iteritems():
    with open(TEMPLATE_PATH + templateName + "/" + source) as inFile:
        outFileName = destination % substitutions
        substitutions[source] = outFileName

        outDirectory = os.path.dirname(outFileName)
        if not os.path.exists(outDirectory):
            os.makedirs(outDirectory)

        with open(outFileName, 'w') as outFile:
            outFile.write(inFile.read() % substitutions)
            repository.addFile(outFileName)

scripts = template.get('Scripts', {})
onfinish = scripts.get('onfinish', [])
for script in onfinish:
    Popen(script % substitutions, shell=True).wait()
