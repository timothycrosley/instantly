#!/usr/bin/python
'''
    Instantly

    A Simple yet powerful tool to expand 'instant' templates

    Copyright (C) 2013  Timothy Edmund Crosley

    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
    documentation files (the "Software"), to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and
    to permit persons to whom the Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all copies or
    substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
    TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
    CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
    OTHER DEALINGS IN THE SOFTWARE.
'''

from __future__ import absolute_import, division, print_function, unicode_literals

import base64
import json
import os
import shutil
import sys
import tarfile
from distutils.dir_util import copy_tree
from getpass import getpass
from glob import glob
from subprocess import Popen

import InstantlyFiles
from configobj import ConfigObj
from pies.overrides import *
from Rest import GOOGLE, RestClient
from WebElements.MultiplePythonSupport import *

TEMPLATE_PATH = os.environ.get("INSTANT_TEMPLATES_PATH", os.path.expanduser('~') + "/.instant_templates/")
TEMPLATE_DESCRIPTION = """
 %(name)s
     Author: %(author)s
     License: %(license)s
     Last Updated: %(lastUpdated)s
     Description:
         %(description)s
"""

__version__ = "0.8.5"

class AbstractRepository(object):
    """
        Defines the abstract concept of a repository for instantly to interact with
    """
    def addFile(self, name):
        pass

    def addDirectory(self, name):
        pass

    def remove(self, name):
        pass

    def revert(self, name):
        pass


class SVN(AbstractRepository):
    """
        Defines instantly interaction with a SVN repository
    """
    def addFile(self, name):
        Popen('svn add ' + name, shell=True).wait()

    def addDirectory(self, name):
        Popen('svn add ' + name, shell=True).wait()
        Popen("svn propset svn:ignore  '*.pyc *._bak *.bak' " + name, shell=True).wait()

    def remove(self, name):
        Popen('svn rm ' + name + " --force", shell=True).wait()

    def revert(self, name):
        Popen('svn revert ' + name, shell=True).wait()


class GIT(AbstractRepository):
    """
        Defines instantly interaction with a GIT repository
    """
    def addFile(self, name):
        Popen('git add ' + name, shell=True).wait()

    def add(self, name):
        Popen('git add ' + name, shell=True).wait()

    def remove(self, name):
        Popen('git rm ' + name + " --force", shell=True).wait()

    def revert(self, name):
        Popen('git checkout ' + name, shell=True).wait()

repository = {'':AbstractRepository, 'SVN':SVN, 'GIT':GIT}[os.environ.get("INSTANT_REPOSITORY_MODE", '')]()

if not os.path.exists(TEMPLATE_PATH):
    copy_tree(InstantlyFiles.__path__[0] + "/instant_templates/", TEMPLATE_PATH)

templates = []
for templateName in glob(TEMPLATE_PATH + "*"):
    if os.path.isdir(templateName):
        templates.append(os.path.basename(templateName))
templates.sort()

def createClient(authenticated=True):
    URL = "http://www.instantly.pl/api/"
    if authenticated:
        print("Please enter the login credentials for a google account that has been registered with instantly.pl")
        username = raw_input("Username (email): ")
        password = getpass()
        return RestClient(URL, username, password, authType=GOOGLE)
    else:
        return RestClient(URL)

if not len(sys.argv) > 1:
    print("Instantly allows you to expand simple templates, that take in a set number of arguments")
    print("Usage: instantly [template name] or instantly undo [template name]")
    print("       type instantly help for full instructions.")
    print("")
    print("Installed Templates:")
    print("\t" + str(templates))
    sys.exit(1)

undo = False
command = sys.argv[1]
extraInputs = sys.argv[2:]
if command == "undo":
    undo = True
    templateName = sys.argv[2]
    extraInputs = sys.argv[3:]
elif command == "help":
    print("Instantly Commands")
    print("")
    print("instantly [template name]")
    print("\t Expand the named template locally")
    print("instantly help")
    print("\t Get full list of commands / help text")
    print("instantly find [template name]")
    print("\t Find pre-made templates to automate a task online")
    print("instantly grab [template name]")
    print("\t Add a template shared online to your local template repository")
    print("instantly drop [template name]")
    print("\t Permanently removes an installed template locally")
    print("instantly create_instant_template")
    print("\t Create a new instant template to automate a task")
    print("instantly share [template name]")
    print("\t Share a template you have created with others online")
    print("\t Must register your google account with http://instantly.pl/ to do this")
    print("instantly install [template directory]")
    print("\t Installs an instant_template directory from the local file system into your personal collection")
    print("\t of instant_templates")
    sys.exit(0)
elif command == "install":
    templateName = sys.argv[2]
    if len(sys.argv) > 3:
        templateDirectory = sys.argv[3]
    else:
        templateDirectory = templateName
    try:
        installationDirectory = TEMPLATE_PATH + templateName + "/"
        if os.path.isdir(installationDirectory):
            shutil.rmtree(installationDirectory)
        shutil.copytree(templateDirectory, installationDirectory)
    except:
        print("An error occurred attempting to install the template %s" % templateDirectory)
        sys.exit(1)

    print("%(name)s has been installed as a local template. Run 'instantly %(name)s' to expand it." % \
          {"name":templateName})
    sys.exit(0)

elif command == "drop":
    templateName = sys.argv[2]
    if raw_input("Are you sure you want to delete %s (y/n)? " % templateName).lower() == "y":
        shutil.rmtree(TEMPLATE_PATH + templateName)
        print("Successfully removed %s from local templates" % templateName)
    sys.exit(0)
elif command == "share":
    templateName = sys.argv[2]
    template = ConfigObj(TEMPLATE_PATH + templateName + "/definition", interpolation=False)
    client = createClient()
    tarPath = TEMPLATE_PATH + templateName + ".tar.gz"
    with tarfile.open(tarPath, "w") as tar:
        tar.dereference = True
        tar.add(TEMPLATE_PATH + templateName, arcname=templateName)
    with open(tarPath, 'rb') as tar:
        encodedTemplate = tar.read().encode("zlib").encode("base64")

    client.post("InstantTemplate", {"license":template["Info"].get("license", ""),
                                    "name":templateName, "description":template["Info"].get("description", ""),
                                    "template":encodedTemplate})
    os.remove(tarPath)
    print("Successfully shared %s, thanks for helping to expand the number of instant templates!" % templateName)
    sys.exit(0)
elif command == "find":
    searchTerm = sys.argv[2]
    results = createClient(authenticated=False).get("find/%s" % searchTerm)
    if not results:
        print("Sorry: no templates have been shared that match the search term '%s'," % searchTerm)
        print("       but you could always add one ;)")
        sys.exit(0)

    print("Instantly found the following templates:")
    for result in results:
        print(TEMPLATE_DESCRIPTION % result)

    print(" To install one of these templates run: instantly grab [template_name]")
    sys.exit(0)
elif command == "grab":
    templateName = sys.argv[2]
    template = createClient(authenticated=False).get("InstantTemplate/%s" % templateName)
    if not template:
        print("Sorry: no one has thought of a way to instantly '%s'," % searchTerm)
        print("       but you could always create one ;)")
        sys.exit(0)
    tarPath = TEMPLATE_PATH + templateName + ".tar.gz"
    with open(tarPath, "wb") as tar:
        tar.write(template['template'].decode("base64").decode("zlib"))
    tarfile.open(tarPath).extractall(TEMPLATE_PATH)
    os.remove(tarPath)

    print("%(name)s has been installed as a local template. Run 'instantly %(name)s' to expand it." % \
          {"name":templateName})
    sys.exit(0)
else:
    templateName = command

if not templateName in templates:
    print("Sorry: there is no way to instantly '%s', but you could always add one ;)" % templateName)
    print("")
    print("To see if anyone else has run: instantly find %s" % templateName)
    sys.exit(1)

template = ConfigObj(TEMPLATE_PATH + templateName + "/definition", interpolation=False)

substitutions = {'InstantTemplates':TEMPLATE_PATH}
substitutions.update(os.environ)
for argument, argumentDefinition in itemsview(template.get('Arguments', {})):
    if extraInputs:
        substitutions[argument] = extraInputs.pop(0)
    else:
        substitutions[argument] = raw_input(argumentDefinition['label'] + " ")

directoryAdditions = template.get('DirectoryAdditions', {})
for name, directory in itemsview(directoryAdditions):
    directory = directory % substitutions
    substitutions[name] = directory
    if undo:
        shutil.rmtree(directory)
        repository.remove(directory)
    else:
        try:
            definedDirectory = TEMPLATE_PATH + templateName + "/" + name
            if os.path.isdir(definedDirectory):
                if os.path.isdir(directory):
                    shutil.rmtree(directory)
                shutil.copytree(definedDirectory, directory)
            else:
                os.makedirs(directory)
        except:
            pass

        repository.addDirectory(directory)

fileDeletions = template.get('FileDeletions', {})
for name, fileName in itemsview(fileDeletions):
    fileName = fileName % substitutions
    substitutions[name] = fileName
    if undo:
        repository.revert(fileName)
    else:
        os.remove(fileName)
        repository.remove(fileName)

fileAdditions = template.get('FileAdditions', {})
if undo:
    for source, fileAddition in itemsview(fileAdditions):
        fileName = fileAddition % substitutions
        if os.path.exists(fileName):
            os.remove(fileName)
        repository.remove(fileName)
    sys.exit(0)

for source, destination in itemsview(fileAdditions):
    with open(TEMPLATE_PATH + templateName + "/" + source) as inFile:
        if not "::" in destination:
            (outFileName, mode) = (destination % substitutions, "")
        else:
            (outFileName, mode) = (destination % substitutions).split("::")
        substitutions[source] = outFileName

        outDirectory = os.path.dirname(outFileName)
        if not os.path.exists(outDirectory):
            os.makedirs(outDirectory)

        inFileContent = inFile.read()
        for substitutionName, substitionValue in substitutions.items():
            inFileContent = inFileContent.replace("%(" + substitutionName + ")s", substitionValue)

        if mode == "APPEND":
            with open(outFileName, 'a') as outFile:
                outFile.write(inFileContent)
        elif mode.startswith("REPLACE"):
            toReplace = mode[8:]
            with open(outFileName, 'r') as currentFile:
                currentFileContents = currentFile.read()
                with open(outFileName, 'w') as outFile:
                    outFile.write(currentFileContents.replace(toReplace, inFileContent))
        elif mode.startswith("BEFORE"):
            placement = mode[7:]
            with open(outFileName, 'r') as currentFile:
                currentFileContents = currentFile.read()
                with open(outFileName, 'w') as outFile:
                    outFile.write(currentFileContents.replace(placement, inFileContent + "\n" + placement))
        elif mode.startswith("AFTER"):
            placement = mode[6:]
            with open(outFileName, 'r') as currentFile:
                currentFileContents = currentFile.read()
                with open(outFileName, 'w') as outFile:
                    outFile.write(currentFileContents.replace(placement, placement + "\n" + inFileContent))
        else:
            with open(outFileName, 'w') as outFile:
                outFile.write(inFileContent)
                repository.addFile(outFileName)

scripts = template.get('Scripts', {})
onfinish = scripts.get('onfinish', [])
for script in onfinish:
    Popen(script % substitutions, shell=True).wait()
