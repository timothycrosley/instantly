#!/usr/bin/python
"""
    Name:
        Instantly

    Description:
        Simple tool to expand 'instant' templates
"""

import os
import tarfile
import base64
import shutil
import sys
from Rest import RestClient
from getpass import getpass
from distutils.dir_util import copy_tree
from glob import glob
from subprocess import Popen

from configobj import ConfigObj

import InstantlyFiles

templatePath = os.environ.get("INSTANT_TEMPLATES_PATH", os.path.expanduser('~') + "/.instant_templates/")
if not os.path.exists(templatePath):
    copy_tree(InstantlyFiles.__path__[0] + "/instant_templates/", templatePath)

templates = []
for templateName in glob(templatePath + "*"):
    templates.append(os.path.basename(templateName))
templates.sort()

def createClient():
    username = raw_input("Username:")
    password = getpass()
    return RestClient("http://www.instantly.pl/api/", username, password)

if not len(sys.argv) > 1:
    print "Instantly allows you to expand simple templates, that take in a set number of arguments"
    print "Usage: instantly [template name] or instantly undo [template name]"
    print "       type instantly help for full instructions."
    print ""
    print "Installed Templates:"
    print "\t", templates
    sys.exit(1)

undo = False
command = sys.argv[1]
extraInputs = sys.argv[2:]
if command == "undo":
    undo = True
    templateName = sys.argv[2]
    extraInputs = sys.argv[3:]
elif command == "help":
    print "Instantly Commands"
    print ""
    print "instantly [template name]"
    print "\t Expand the named template locally"
    print "instantly help"
    print "\t Get full list of commands / help text"
    print "instantly find [template name]"
    print "\t Find pre-made templates to automate a task online"
    print "instantly grab [template name]"
    print "\t Add a template shared online to your local template repository"
    print "instantly drop [template name]"
    print "\t Permanently removes an installed template locally"
    print "instantly create_instant_template"
    print "\t Create a new instant template to automate a task"
    print "instantly share [template name]"
    print "\t Share a template you have created with others online"
    print "\t Must register your google account with http://instantly.pl/ to do this"
    sys.exit(0)
elif command == "drop":
    templateName = sys.argv[2]
    if raw_input("Are you sure you want to delete %s (y/n)? " % templateName).lower() == "y":
        shutil.rmtree(templatePath + templateName)
        print "Successfully removed %s from local templates" % templateName
    sys.exit(0)
elif command == "share":
    templateName = sys.argv[2]
    template = ConfigObj(templatePath + templateName + "/definition", interpolation=False)
    client = createClient()
    with tarfile.open(templatePath + templateName + ".tar.gz", "w") as tar:
        tar.add(templatePath + templateName, arcname=templateName)
    with open(templatePath + templateName + ".tar.gz", 'rb') as tar:
        encodedTemplate = tar.read().encode("zlib").encode("base64")

    client.post("InstantTemplate", {"license":template["Info"].get("license", ""),
                                    "name":sys.argv[2], "description":template["Info"].get("description", ""),
                                    "template":encodedTemplate})
    print "Successfully shared %s, thanks for helping to expand the number of instant templates!" % templateName
    sys.exit(0)
else:
    templateName = command

if not templateName in templates:
    print "Sorry :( there is no way to instantly '%s', but you could always add one ;)" % templateName
    sys.exit(1)

template = ConfigObj(templatePath + templateName + "/definition", interpolation=False)

substitutions = {'InstantTemplates':templatePath}
substitutions.update(os.environ)
for argument, argumentDefinition in template.get('Arguments', {}).iteritems():
    if extraInputs:
        substitutions[argument] = extraInputs.pop(0)
    else:
        substitutions[argument] = raw_input(argumentDefinition['label'] + " ")

directoryAdditions = template.get('DirectoryAdditions', {})
for name, directory in directoryAdditions.iteritems():
    directory = directory % substitutions
    substitutions[name] = directory
    if undo:
        Popen('svn rm ' + directory + " --force", shell=True).wait()
    else:
        try:
            os.makedirs(directory)
        except:
            pass
        Popen('svn add ' + directory, shell=True).wait()
        Popen("svn propset svn:ignore  '*.pyc *._bak *.bak' " + directory, shell=True).wait()

fileDeletions = template.get('FileDeletions', {})
for name, fileName in fileDeletions.iteritems():
    fileName = fileName % substitutions
    substitutions[name] = fileName
    if undo:
        Popen('svn revert ' + fileName, shell=True).wait()
    else:
        Popen('svn rm ' + fileName + " --force", shell=True).wait()

fileAdditions = template.get('FileAdditions', {})
if undo:
    for source, fileAddition in fileAdditions.iteritems():
        fileName = fileAddition % substitutions
        Popen('svn rm ' + fileName + " --force", shell=True).wait()
        if os.path.exists(fileName):
            os.remove(fileName)
    sys.exit(0)

for source, destination in fileAdditions.iteritems():
    with open(templatePath + templateName + "/" + source) as inFile:
        outFileName = destination % substitutions
        substitutions[source] = outFileName

        outDirectory = os.path.dirname(outFileName)
        if not os.path.exists(outDirectory):
            os.makedirs(outDirectory)

        with open(outFileName, 'w') as outFile:
            outFile.write(inFile.read() % substitutions)
            Popen('svn add ' + outFileName, shell=True).wait()

scripts = template.get('Scripts', {})
onfinish = scripts.get('onfinish', [])
for script in onfinish:
    Popen(script % substitutions, shell=True).wait()
