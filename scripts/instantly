#!/usr/bin/python
"""
    Name:
        Instantly

    Description:
        Simple tool to expand 'instant' templates
"""

import os
import shutil
import sys
from glob import glob
from subprocess import Popen

from configobj import ConfigObj


templatePath = os.environ.get("INSTANT_TEMPLATES_PATH", "instant_templates/")

templates = []
for templateName in glob(templatePath + "*"):
    templates.append(os.path.basename(templateName))
templates.sort()

if not len(sys.argv) > 1:
    print "Instantly allows you to expand simple templates, that take in a set number of arguments"
    print "Usage: instantly [template name] or instantly undo [template name]"
    print ""
    print "templates:"
    print "\t", templates
    sys.exit(1)

undo = False
templateName = sys.argv[1]
extraInputs = sys.argv[2:]
if templateName == "undo":
    undo = True
    templateName = sys.argv[2]
    extraInputs = sys.argv[3:]

elif not templateName in templates:
    print "Sorry :( there is no way to instantly '%s', but you could always add one ;)" % templateName
    sys.exit(1)

template = ConfigObj(templatePath + templateName + "/definition", interpolation=False)

substitutions = {'InstantTemplates':templatePath}
substitutions.update(os.environ)
for argument, argumentDefinition in template.get('Arguments', {}).iteritems():
    if extraInputs:
        substitutions[argument] = extraInputs.pop(0)
    else:
        substitutions[argument] = raw_input(argumentDefinition['label'] + " ")

directoryAdditions = template.get('DirectoryAdditions', {})
for name, directory in directoryAdditions.iteritems():
    directory = directory % substitutions
    substitutions[name] = directory
    if undo:
        Popen('svn rm ' + directory + " --force", shell=True).wait()
    else:
        try:
            os.makedirs(directory)
        except:
            pass
        Popen('svn add ' + directory, shell=True).wait()
        Popen("svn propset svn:ignore  '*.pyc *._bak *.bak' " + directory, shell=True).wait()

fileDeletions = template.get('FileDeletions', {})
for name, fileName in fileDeletions.iteritems():
    fileName = fileName % substitutions
    substitutions[name] = fileName
    if undo:
        Popen('svn revert ' + fileName, shell=True).wait()
    else:
        Popen('svn rm ' + fileName + " --force", shell=True).wait()

fileAdditions = template.get('FileAdditions', {})
if undo:
    for source, fileAddition in fileAdditions.iteritems():
        fileName = fileAddition % substitutions
        Popen('svn rm ' + fileName + " --force", shell=True).wait()
        if os.path.exists(fileName):
            os.remove(fileName)
    sys.exit(0)

for source, destination in fileAdditions.iteritems():
    with open(templatePath + templateName + "/" + source) as inFile:
        outFileName = destination % substitutions
        substitutions[source] = outFileName

        outDirectory = os.path.dirname(outFileName)
        if not os.path.exists(outDirectory):
            os.makedirs(outDirectory)

        with open(outFileName, 'w') as outFile:
            outFile.write(inFile.read() % substitutions)
            Popen('svn add ' + outFileName, shell=True).wait()

scripts = template.get('Scripts', {})
onfinish = scripts.get('onfinish', [])
for script in onfinish:
    Popen(script % substitutions, shell=True).wait()
